// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum VerificationType {
  EMAIL
  PASSWORD_RESET
  TWO_FACTOR
}

model User {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?
  password              String?
  role                  UserRole  @default(USER)
  image                 String?
  phone                 String?
  referralCode          String    @unique
  referredBy            String?   @db.ObjectId
  referredByUser        User?     @relation("UserReferrals", fields: [referredBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referrals             User[]    @relation("UserReferrals")
  isTwoFactorEnabled    Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  wallet                Wallet?
  investments           Investment[]
  verifications         Verification[]
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Verification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  userId      String           @db.ObjectId
  token       String           @unique
  type        VerificationType
  expires     DateTime
  createdAt   DateTime         @default(now())

  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TwoFactorConfirmation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Wallet {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  balance     Float    @default(0)
  referralBalance Float @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Transaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  walletId    String   @db.ObjectId
  amount      Float
  type        String   // DEPOSIT, WITHDRAWAL, INVESTMENT, REFERRAL_BONUS
  status      String   // PENDING, COMPLETED, FAILED
  reference   String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  targetAmount  Float
  currentAmount Float    @default(0)
  unitAmount    Float
  duration      Int      // in months
  cycle         Int      // in months
  returnPerCycle Float
  status        String   @default("ACTIVE") // ACTIVE, FUNDED, COMPLETED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  investments   Investment[]
}

model Investment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  productId   String   @db.ObjectId
  amount      Float
  units       Int
  status      InvestmentStatus   // ACTIVE, COMPLETED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}


enum InvestmentStatus {
  ACTIVE
  COMPLETED
}

model Contact {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  email       String
  company     String?
  interest    String
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}